---
title: "Интерактивный дашборд"
author: "Ivan Trushin"
format:
  dashboard:
    logo: logo.png
    nav-buttons:
    - icon: github
      href: https://github.com/
    - icon: gitlab
      href: https://gitlab.com/
# Добавляем интерактивности - говорим что будем использовать Shiny server
server: shiny
---

<!-- Начальная загрузка всех нужных пакетов -->
```{r}
#| context: setup
library(tidyverse)
library(readxl)
library(leaflet)
library(purrr)
library(gtsummary)
library(gt)
library(DT)
library(plotly)
library(highcharter)
library(scales)
library(ggplot2)
library(ggrepel)
library(shinydashboard)
# Читаем наш файл
dataset <- read_excel("data_knime_result.xlsx", sheet = "Пациенты", )
dataset$DATESTRAIN <- as.Date(dataset$DATESTRAIN)
dataset$DATEBIRTH <- as.Date(dataset$DATEBIRTH)
dataset$DATEFILL <- as.Date(dataset$DATEFILL)
```
<!-- В сайдбаре будем размещать все контролы -->
# {.sidebar}

```{r}
#| label: Контролы фильтров
# Выбор группы пациентов
selectInput('selPatgroup', 'Группа пациентов',
            choices = c(Все = '.', sort(unique(dataset$PAT_GROUP)))
            )
# Выбор города
selectInput('selCity', 'Город',
            choices = c(Все = '.', sort(unique(dataset$CITYNAME))),
            selected = c("."),
            multiple = TRUE)
# Выбор временного диапазона
minDate <- min(dataset$DATESTRAIN, na.rm = TRUE)
maxDate <- max(dataset$DATESTRAIN, na.rm = TRUE)
dateRangeInput('selDateRange', 'Дата взятия образца',
  start = minDate, end = maxDate,
  min = minDate, max = maxDate,
  format = "yyyy-mm-dd",
  startview = "month",  weekstart = 1,  language = "ru",
  separator = " - ",  width = NULL,
  autoclose = TRUE
)
# Выбор возраста
minAge <- min(dataset$AGE)
maxAge <- max(dataset$AGE)
sliderInput('selAge', 'Возраст',
  min = minAge,  max = maxAge,
  value = c(minAge, maxAge),
  step = 1, dragRange = TRUE
)
# вывод количества отфильтрованных строк
textOutput('count_text')
```

```{r}
#| label: создание выходного результата
#| context: server

output$count_text <- renderText({
 paste("Выбрано",nrow(data()), "образцов", sep = " ")
})
```

```{r}
#| label: отбор данных по фильтрам
#| context: server

data <- reactive({
  d <- dataset
  if (input$selPatgroup != "." ) {
    d <- d %>% filter(PAT_GROUP == input$selPatgroup)
  }
  if ( !("." %in% input$selCity ) ) {
    d <- d %>% filter(CITYNAME %in% input$selCity)
  }
  if (length(input$selDateRange) == 2) {
    d <- d %>% filter(DATESTRAIN >= input$selDateRange[1] & DATESTRAIN <= input$selDateRange[2])
  }
  if (length(input$selAge) == 2) {
    d <- d %>% filter(AGE >= input$selAge[1] & AGE <= input$selAge[2])
  }

  d
})
```



# Дашборд

## Row {.tabset}

::: {.card title="Карта"}
```{r}
#| label: Карта
#| context: server

output$map <-  renderLeaflet({
    data() %>% select(CITYNAME, LATITUDE, LONGITUDE) %>%
    group_by(CITYNAME, LATITUDE, LONGITUDE) %>%
    summarise(Count = n()) %>%
    ungroup() %>%
    leaflet() %>%
    addCircleMarkers(
      lng = ~ LONGITUDE,
      lat = ~ LATITUDE,
      stroke = FALSE,
      fillOpacity = 0.5,
      radius = ~ scales::rescale(sqrt(Count), c(1, 10)),
      label = ~ paste("<strong>" , CITYNAME, ": ", Count, "</strong>") %>% map(html),
      labelOptions = c(textsize = "15px")) %>%
    addTiles("http://services.arcgisonline.com/arcgis/rest/services/Canvas/World_Light_Gray_Base/MapServer/tile/{z}/{y}/{x}")
  })

```

```{r}
#| label: Рисуем карту
leafletOutput("map")
```
:::

::: {.card title="Таблица"}
```{r}
#| label: Таблица пациентов по городам
#| context: server

output$table_cities <- render_gt({
  data() %>%
    group_by(CITYNAME) %>% summarise(Count = n()) %>%
    ungroup() %>% 
    rename("Город" = CITYNAME, "Образцов" = Count) %>%
    gt(rowname_col = "Город") %>%
    tab_header(
      title = "Распределение пациентов",
      subtitle = paste("Среди", nrow(df), "городов", sep = " ")
    ) %>%
    grand_summary_rows(
      columns = c("Образцов"),
      fns = list(Всего = ~sum(., na.rm = TRUE))
    ) %>%
    tab_options(
      grand_summary_row.text_transform = "capitalize"
    ) %>%
    opt_row_striping(row_striping = TRUE)
})
```

```{r}
#| label: Выводим таблицу по городам
gt_output('table_cities')
```
:::

::: {.card title="Диагнозы"}
```{r}
#| label: Таблица диагнозов по городам
#| context: server

output$table_diags <- render_gt({
 df <- data() %>%
  group_by(CITYNAME, mkb_name) %>% summarise(Count = n()) %>%
  ungroup() %>%
  pivot_wider(names_from = "CITYNAME", values_from = "Count", values_fill = 0) %>%
  select(order(colnames(.))) %>%
  mutate(Всего = rowSums(pick(where(is.numeric), -mkb_name)))

df %>%
  gt(rowname_col = "mkb_name") %>%
  tab_header(
    title = "Распределение диагнозов",
    subtitle = paste("Среди", nrow(df), "городов", sep = " ")
  ) %>%
  grand_summary_rows(
    columns = colnames(df)[-1],
    fns = list(Всего = ~sum(., na.rm = TRUE))
  ) %>%
  tab_options(
    grand_summary_row.text_transform = "capitalize"
  ) %>%
  opt_row_striping(row_striping = TRUE)
})

```

```{r}
#| label: Выводим таблицу по диагнозам
gt_output('table_diags')
```
:::

::: {.card title="Организмы"}
```{r}
#| label: Таблица организмов по городам
#| context: server

output$table_orgs <- render_gt({
 df <- data() %>%
  group_by(CITYNAME, STRAIN) %>% summarise(Count = n()) %>%
  ungroup() %>%
  pivot_wider(names_from = "CITYNAME", values_from = "Count", values_fill = 0) %>%
  select(order(colnames(.))) %>%
  mutate(Всего = rowSums(pick(where(is.numeric), -STRAIN)))

df %>%
  gt(rowname_col = "STRAIN") %>%
  tab_header(
    title = "Распределение организмов",
    subtitle = paste("Среди", nrow(df), "городов", sep = " ")
  ) %>%
  grand_summary_rows(
    columns = colnames(df)[-1],
    fns = list(Всего = ~sum(., na.rm = TRUE))
  ) %>%
  tab_options(
    grand_summary_row.text_transform = "capitalize"
  ) %>%
  opt_row_striping(row_striping = TRUE)
})

```

```{r}
#| label: Выводим таблицу по организмам
gt_output('table_orgs')
```
:::

## Row

### Column {width = 50%}


```{r}
#| label: График диагнозов
#| context: server

output$diag <- renderPlotly({
  data() %>%
    group_by(mkb_name) %>% summarize(count = n()) %>%
    plot_ly(labels = ~mkb_name, values = ~count) %>%
    add_pie(hole = 0.6) %>%
    layout(title = "Структура диагнозов",  showlegend = TRUE,
                      xaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),
                      yaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE)) %>%
  layout(legend = list(orientation = "h", xanchor = "center", x = 0.5))
})

```

```{r}
#| label: Рисуем диагнозы
plotlyOutput("diag", width = "100%", height = "100%")
```

### Column {width = 50%}


```{r}
#| label: График организмов
#| context: server

output$org <- renderPlot({
  df <- data() %>%
    group_by(STRAIN) %>%
    summarise(Count = n()) %>%
    ungroup() %>%
    mutate(Percent = round(100 * Count / sum(Count))) %>%
    arrange(desc(Percent)) %>%
    mutate(csum = rev(cumsum(rev(Count))),
           pos = Count/2 + lead(csum, 1),
           pos = if_else(is.na(pos), Count/2, pos))
    ggplot(df, aes(x = "" , y = Count, fill = fct_inorder(STRAIN))) +
      geom_col(width = 1, color = 1) +
      coord_polar(theta = "y") +
      scale_fill_brewer(palette = "Pastel1") +
      geom_label_repel(data = df,
                       aes(y = pos, label = paste0(Count, " (", Percent, "%)")),
                       size = 4.5, nudge_x = 1, show.legend = FALSE) +
      guides(fill = guide_legend(title = "Организм")) +
      labs(title = "Структура организмов") +
      theme_void() +
      theme(title = element_text(size = 14, face = "bold", hjust = 0.5 ))
})

```

```{r}
#| label: Рисуем организмы
plotOutput("org", width = "100%", height = "100%")
```

# Набор данных

```{r}
#| label: Таблица отфильтрованная
#| context: server

output$table_data <- renderDataTable({

datatable(data(),
  options = list(paging = TRUE,    ## paginate the output
                 pageLength = 15,  ## number of rows to output for each page
                 scrollX = TRUE,   ## enable scrolling on X axis
                 scrollY = TRUE,   ## enable scrolling on Y axis
                 autoWidth = TRUE, ## use smart column width handling
                 server = FALSE,   ## use client-side processing
                 dom = 'Bfrtip',
                 buttons = c('csv', 'excel'),
                 columnDefs = list(list(targets = '_all', className = 'dt-center'),
                                   list(targets = c(0, 8, 9), visible = FALSE))
                 ),
  extensions = 'Buttons',
  selection = 'single', ## enable selection of a single row
  filter = 'top',              ## include column filters at the bottom
  rownames = FALSE                ## don't show row numbers/names
)
})
```

```{r}
#| label: Динамическая таблица
dataTableOutput("table_data", width = "100%", height = "100%")
```
